// num_pipeline_stages = 2 
// num_alus_per_stage = 2 (2 stateless_ALU + 2 stateful_ALU)
// num_phv_containers = 2
// imux stands for input mux; omux for output mux
int stateless_alu_0_0_imux1_ctrl= ??(1);
int stateless_alu_0_0_imux2_ctrl= ??(1);
int stateless_alu_0_0_immediate= ??(2);
int stateless_alu_0_0_opcode= ??(2);
int stateless_alu_0_1_imux1_ctrl= ??(1);
int stateless_alu_0_1_imux2_ctrl= ??(1);
int stateless_alu_0_1_immediate= ??(2);
int stateless_alu_0_1_opcode= ??(2);
int stateful_alu_0_0_Mode_global= ??(1);
int stateful_alu_0_0_const_0_global= ??(2);
int stateful_alu_0_1_Mode_global= ??(1);
int stateful_alu_0_1_const_0_global= ??(2);
int stateless_alu_1_0_imux1_ctrl= ??(1);
int stateless_alu_1_0_imux2_ctrl= ??(1);
int stateless_alu_1_0_immediate= ??(2);
int stateless_alu_1_0_opcode= ??(2);
int stateless_alu_1_1_imux1_ctrl= ??(1);
int stateless_alu_1_1_imux2_ctrl= ??(1);
int stateless_alu_1_1_immediate= ??(2);
int stateless_alu_1_1_opcode= ??(2);
int stateful_alu_1_0_Mode_global= ??(1);
int stateful_alu_1_0_const_0_global= ??(2);
int stateful_alu_1_1_Mode_global= ??(1);
int stateful_alu_1_1_const_0_global= ??(2);
int stateful_operand_mux_0_0_0_ctrl= ??(1);
int stateful_operand_mux_0_1_0_ctrl= ??(1);
int stateful_operand_mux_1_0_0_ctrl= ??(1);
int stateful_operand_mux_1_1_0_ctrl= ??(1);
int output_mux_phv_0_0_ctrl= ??(2);
int output_mux_phv_0_1_ctrl= ??(2);
int output_mux_phv_1_0_ctrl= ??(2);
int output_mux_phv_1_1_ctrl= ??(2);
int salu_config_0_0= ??(1);
int salu_config_0_1= ??(1);
int salu_config_1_0= ??(1);
int salu_config_1_1= ??(1);
// Definitions of muxes and ALUs of the switch pipeline
int stateful_operand_mux_0_0_0(int input0,int input1, int stateful_operand_mux_0_0_0_ctrl_local) {
    if (stateful_operand_mux_0_0_0_ctrl_local == 0) { return input0;}
    else { return input1; }
}
int stateful_operand_mux_1_0_0(int input0,int input1, int stateful_operand_mux_0_1_0_ctrl_local) {...}
int stateful_operand_mux_1_0_0(int input0,int input1, int stateful_operand_mux_1_0_0_ctrl_local) {...}
int stateful_operand_mux_1_0_0(int input0,int input1, int stateful_operand_mux_1_1_0_ctrl_local) {...}
// Output mux for each PHV container
int output_mux_phv_0_0(int input0,int input1,int input2,int output_mux_phv_0_0_ctrl_local) {
    if (output_mux_phv_0_0_ctrl_local == 0) {return input0;}
    else if (output_mux_phv_0_0_ctrl_local == 1) {return input1;}
    else {return input2;}
}
int output_mux_phv_0_1(int input0,int input1,int input2,int output_mux_phv_0_1_ctrl_local) {...}
int output_mux_phv_1_0(int input0,int input1,int input2,int output_mux_phv_1_0_ctrl_local) {...}
int output_mux_phv_1_1(int input0,int input1,int input2,int output_mux_phv_1_1_ctrl_local) {...}
// Definition for ALUs
int stateless_alu_0_0_mux1(int input0,int input1, int stateless_alu_0_0_imux1_ctrl_local) {
    if (stateless_alu_0_0_imux1_ctrl_local == 0) { return input0;}
    else { return input1; }
}
int stateless_alu_0_0_mux2(int input0,int input1, int stateless_alu_0_0_imux2_ctrl_local) {...}
int stateless_alu_0_0(int input0,int input1,int opcode,int immediate,int imux1_ctrl_hole_local,int imux2_ctrl_hole_local){
	int pkt_0 = stateless_alu_0_0_mux1(input0,input1,imux1_ctrl_hole_local);
	int pkt_1 = stateless_alu_0_0_mux2(input0,input1,imux2_ctrl_hole_local);
	if (opcode==0) { return pkt_0+pkt_1;}
	else if (opcode==1) { return pkt_0-pkt_1;}
	else if (opcode==2) { return pkt_0+immediate;}
	else { return pkt_0-immediate;}
}
int stateless_alu_0_1_mux1(int input0,int input1, int stateless_alu_0_1_imux1_ctrl_local) {...}
int stateless_alu_0_1_mux2(int input0,int input1, int stateless_alu_0_1_imux2_ctrl_local) {...}
int stateless_alu_0_1(int input0,int input1,int opcode,int immediate,int imux1_ctrl_hole_local,int imux2_ctrl_hole_local ){...}
int stateful_alu_0_0_Mode(int output1,int output2,int mode) {
    if (mode == 0) return output1;
    else return output2;
} 
int stateful_alu_0_0(int ref state_0, int pkt_0, int mode,int Opt_0,int const_0) {
 int old_state_0 = state_0;
 state_0 = stateful_alu_0_0_Mode(state_0 + const_0, pkt_0, mode);
 return old_state_0;
}
// Data type for holding result from spec and implementation
struct StateAndPacket {
    int pkt_0;
    int state_0;
    int state_1;
}
// Specification
| StateAndPacket | program(| StateAndPacket | state_and_packet) {
  state_and_packet.pkt_0 = 1 + state_and_packet.state_0;
  state_and_packet.state_1 = state_and_packet.state_0;
  return state_and_packet;
}
// Implementation
  |StateAndPacket| pipeline (|StateAndPacket| state_and_packet) {
  // Any additional constraints to speed up synthesis through parallel execution.
  assert((salu_config_0_0 + salu_config_0_1 + 0) <= 2);
  assert((salu_config_1_0 + salu_config_1_1 + 0) <= 2);
  assert((salu_config_0_0 + salu_config_1_0 + 0) <= 1);
  assert((salu_config_0_1 + salu_config_1_1 + 0) <= 1);
  // Container i will be allocated to packet field i from the spec.
    int input_0_0 = 0;
    int input_0_1 = 0;
  // One variable for each stateful ALU's state operand
  // This will be allocated to a state variable from the program using indicator variables.
      state_operand_salu_0_0 = 0;
      state_operand_salu_0_1 = 0;
      state_operand_salu_1_0 = 0;
      state_operand_salu_1_1 = 0;
    /*********** Stage 0 *********/
    // Read each PHV container from corresponding packet field.
      input_0_0 = state_and_packet.pkt_0;
    // Stateless ALUs
      int destination_0_0 = stateless_alu_0_0(input_0_0,input_0_1,stateless_alu_0_0_opcode,stateless_alu_0_0_immediate,
          stateless_alu_0_0_imux1_ctrl,stateless_alu_0_0_imux2_ctrl);
      int destination_0_1 = stateless_alu_0_1(...);
   // Stateful operands
        int packet_operand_salu0_0_0 = stateful_operand_mux_0_0_0(input_0_0,input_0_1,stateful_operand_mux_0_0_0_ctrl);
        int packet_operand_salu0_1_0 = stateful_operand_mux_0_1_0(...);
    // Read stateful ALU slots from allocated state vars.
      if (salu_config_0_0 == 1) {
        state_operand_salu_0_0 = state_and_packet.state_0;}
      if (salu_config_0_1 == 1) {
        state_operand_salu_0_1 = state_and_packet.state_1;}
    // Stateful ALUs
      int state_alu_output_0_0 = stateful_alu_0_0(state_operand_salu_0_0,packet_operand_salu0_0_0,
      stateful_alu_0_0_Mode_global,stateful_alu_0_0_const_0_global);
      int state_alu_output_0_1 = stateful_alu_0_1(...);
    // Outputs
      int output_0_0 = output_mux_phv_0_0(state_alu_output_0_0,state_alu_output_0_1,destination_0_0,output_mux_phv_0_0_ctrl);
      int output_0_1 = output_mux_phv_0_1(...);
      // Write state_0
      if (salu_config_0_0 == 1) { state_and_packet.state_0 = state_operand_salu_0_0;}
      // Write state_1
      ...
    /*********** Stage 1 *********/
    // Input of this stage is the output of the previous one.
      int input_1_0 = output_0_0;
      int input_1_1 = output_0_1;
    ...
    // Write pkt_0
    state_and_packet.pkt_0 = output_1_0;
  // Return updated packet fields and state vars
  return state_and_packet;
}
  harness void main(int pkt_0, int state_0, state_1) {
    |StateAndPacket| x = |StateAndPacket|(pkt_0 = pkt_0,state_0 = state_0,state_1 = state_1);
    |StateAndPacket| pipeline_result = pipeline(x);
    |StateAndPacket| program_result = program(x);
    assert(pipeline_result.state_0 == program_result.state_0);
    assert(pipeline_result.state_1 == program_result.state_1);
    assert(pipeline_result.pkt_0 == program_result.pkt_0);
  }

