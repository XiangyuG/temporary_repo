{"num_pipeline_stages": 5, "alu_dependencies": [[0, 4], [0, 4], [0, 6], [0, 6], [1, 2], [1, 3], [1, 4], [1, 4], [1, 6], [1, 6], [2, 5], [2, 6], [4, 7], [5, 7], [6, 7], [7, 3]], "stateful_alus": [{"inputs": ["seen"], "outputs": ["p_seen01", "seen", "p_seen00"], "id": 0, "body": ["void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n", "{\n", "  _out0 = ((int[2])0);\n", "  int state_0 = state_0_0;\n", "  if((pkt_0 - pkt_0) != 0)/*comp_0_..ateful.sk:134*/\n", "  {\n", "    if(((state_0_0 + pkt_0) - pkt_0) > 2)/*comp_0_..ateful.sk:135*/\n", "    {\n", "      state_0 = state_0_0 + 49;\n", "    }\n", "    else\n", "    {\n", "      state_0 = -3;\n", "    }\n", "  }\n", "  else\n", "  {\n", "    if(((state_0_0 + pkt_0) - pkt_0) > 0)/*comp_0_..ateful.sk:141*/\n", "    {\n", "      state_0 = state_0_0 + (pkt_0 + pkt_0);\n", "    }\n", "    else\n", "    {\n", "      state_0 = 1 + pkt_0;\n", "    }\n", "  }\n", "  _out0[0] = state_0;\n", "  _out0[1] = state_0;\n"]}, {"inputs": ["seen"], "outputs": ["p_seen01", "seen", "p_seen00"], "id": 1, "body": ["void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n", "{\n", "  _out0 = ((int[2])0);\n", "  int state_0 = state_0_0;\n", "  if(((state_0_0 + pkt_0) - pkt_0) < 1)/*comp_1_..ateful.sk:134*/\n", "  {\n", "    if(((state_0_0 + pkt_0) - pkt_0) < 1)/*comp_1_..ateful.sk:135*/\n", "    {\n", "      state_0 = 1;\n", "    }\n", "    else\n", "    {\n", "      state_0 = 2;\n", "    }\n", "  }\n", "  else\n", "  {\n", "    if((pkt_0 - pkt_0) == 16)/*comp_1_..ateful.sk:141*/\n", "    {\n", "      state_0 = state_0_0 + 25;\n", "    }\n", "    else\n", "    {\n", "      state_0 = state_0_0;\n", "    }\n", "  }\n", "  _out0[0] = state_0;\n", "  _out0[1] = state_0_0;\n"]}, {"inputs": ["last_ttl", "p_seen00", "p_ttl"], "outputs": ["p__br_tmp6", "p_last_ttl00", "last_ttl"], "id": 2, "body": ["void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n", "{\n", "  _out0 = ((int[2])0);\n", "  int state_0 = state_0_0;\n", "  if((0 - pkt_1) > 0)/*comp_2_..ateful.sk:134*/\n", "  {\n", "    if((pkt_0 - pkt_1) > 0)/*comp_2_..ateful.sk:135*/\n", "    {\n", "      state_0 = state_0_0 + 20;\n", "    }\n", "    else\n", "    {\n", "      state_0 = state_0_0 + 12;\n", "    }\n", "  }\n", "  else\n", "  {\n", "    if((0 - pkt_1) > 16)/*comp_2_..ateful.sk:141*/\n", "    {\n", "      state_0 = pkt_0 + 27;\n", "    }\n", "    else\n", "    {\n", "      state_0 = pkt_1;\n", "    }\n", "  }\n", "  _out0[0] = state_0;\n", "  _out0[1] = state_0_0;\n"]}, {"inputs": ["ttl_change", "p__br_tmp7", "p_seen00"], "outputs": ["p_ttl_change02", "p_ttl_change01", "p_ttl_change00", "p__br_tmp6", "ttl_change"], "id": 3, "body": ["void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_3_..ateful.sk:132*/\n", "{\n", "  _out0 = ((int[2])0);\n", "  int state_0 = state_0_0;\n", "  if((pkt_1 - pkt_0) < 1)/*comp_3_..ateful.sk:134*/\n", "  {\n", "    if((pkt_1 - 0) == 0)/*comp_3_..ateful.sk:135*/\n", "    {\n", "      state_0 = pkt_0;\n", "    }\n", "    else\n", "    {\n", "      state_0 = state_0_0 + 1;\n", "    }\n", "  }\n", "  else\n", "  {\n", "    if((pkt_1 - 0) > 31)/*comp_3_..ateful.sk:141*/\n", "    {\n", "      state_0 = 21;\n", "    }\n", "    else\n", "    {\n", "      state_0 = state_0_0 + pkt_0;\n", "    }\n", "  }\n", "  _out0[0] = state_0;\n", "  _out0[1] = 0;\n"]}], "stateless_alus": [{"id": 4, "opcode": 14, "operand0": "p_seen01", "operand1": "p_seen00", "operand2": "p_seen01", "result": "_out_s14", "immediate_operand": "31"}, {"id": 5, "opcode": 6, "operand0": "p_ttl", "operand1": "p_last_ttl00", "operand2": "p_last_ttl00", "result": "_out_s14_0", "immediate_operand": "0"}, {"id": 6, "opcode": 18, "operand0": "p_seen00", "operand1": "p_seen01", "operand2": "p_last_ttl00", "result": "_out_s14_1", "immediate_operand": "3"}, {"id": 7, "opcode": 18, "operand0": "_out_s14", "operand1": "_out_s14_0", "operand2": "_out_s14_1", "result": "p__br_tmp7", "immediate_operand": "15"}, {"id": 8, "opcode": 2, "operand0": "p_rdata", "operand1": "p_rdata", "operand2": "p_rdata", "result": "p_rdata", "immediate_operand": 0}]}