generator int C() { return ??; }

generator int Opt(int op1) {
  bit enable = ??(1);
  if (enable != 0) {
    return 0;
  }
  else {
    return op1;
  }
}

generator int Mux2(int op1, int op2) {
  int choice = ??(1);
  if (choice == 0) {
    return op1;
  }
  else {
    return op2;
  }
}

generator int Mux3(int op1, int op2, int op3) {
  int choice = ??(2);
  if (choice == 0) {
    return op1;
  }
  if (choice == 1) {
    return op2;
  }
  else {
    return op3;
  }
}

generator int Mux4(int op1, int op2, int op3, int op4) {
  int choice = ??(2);
  if (choice == 0) {
    return op1;
  }
  if (choice == 1) {
    return op2;
  }
  if (choice == 2) {
    return op3;
  }
  else {
    return op4;
  }
}

generator int arith_op(int o1, int o2) {
  int opcode = ??(1);
  if (opcode == 0) {
    return o1 + o2;
  } 
  else {
    return o1 - o2;
  }
}

generator bit rel_op(int o1, int o2) {
  int opcode = ??(2);
  if (opcode == 0) {
    return o1 != o2;
  }
  if (opcode == 1) {
    return o1 < o2;
  }
  if (opcode == 2) {
    return o1 > o2;
  }
  else {
    return o1 == o2;
  }
        //return {| o1 ( == | != | > | >= | < | <= ) o2 |};
}

bit bool_op(int opcode, bit o1, bit o2) {
        if (opcode == 0) {
                return 0;
        }
        if (opcode == 1) {
                return !(o1 | o2);
        }
  if (opcode == 2) {
    return (!o1) & o2;
  }
  if (opcode == 3) {
    return !o1;
  }
  if (opcode == 4) {
    return o1 & (!o2);
  }
  if (opcode == 5) {
    return !o2;
  }
  if (opcode == 6) {
    // used to be XOR; switched to AND because Tofino compiler doesn't accept it
    return o1 & o2;
  }
  if (opcode == 7) {
    return !(o1 & o2);
  }
  if (opcode == 8) {
    return o1 & o2;
  }
  if (opcode == 9) {
    // This used to be XOR; it's been switched to AND because the Tofino compiler doesn't accept it (issue #20).
    return !(o1 & o2);
  }
  if (opcode == 10) {
    return o2;
  }
  if (opcode == 11) {
    return (!o1) | o2;
  }
  if (opcode == 12) {
    return o1;
  }
  if (opcode == 13) {
    return o1 | (!o2);
  }
  if (opcode == 14) {
    return o1 | o2;
  }
        else {
                return 1;
        }
}
int[2] salu(int state_0, int pkt_0, int pkt_1) {
  int old_state_0 = state_0;
  if (rel_op(Opt(state_0), Mux3(pkt_0, pkt_1, C()))) {
      state_0 = Opt(state_0) + Mux3(pkt_0, pkt_1, C());
  }
  int alu_0 = state_0;
  int[2] result;
  result[0] = Mux2(alu_0, 0);
  result[1] =  Mux3(old_state_0, state_0, 0);
  return result;
}
int[2] query_1(int state_1, int p_pkt_0, int p_pkt_10){
	int[2] _out;
	int p_state_101;
	int p_state_100;
	bit p__br_tmp1;
	p_state_100 = state_1;
	p__br_tmp1 = p_pkt_10>p_state_100;
	p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
	state_1 = p_state_101;
	p__br_tmp1 = p_pkt_10>p_state_100;
	_out[0] = state_1;
	_out[1] = p__br_tmp1;
	return _out;
}

harness void sketch(int state_1, int p_pkt_0, int p_pkt_10) {
	 int[2] impl = salu(state_1,p_pkt_0,p_pkt_10);
	int[2] spec = query_1(state_1, p_pkt_0, p_pkt_10);
	assert(impl[0] == spec[0]);
	assert(impl[1] == spec[1]);
}
