SKETCH version 1.7.5
Benchmark = /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out/try_merge_query_1_stateful.sk
/* BEGIN PACKAGE ANONYMOUS*/
/*try_mer..ateful.sk:79*/

void bool_op (int opcode, bit o1, bit o2, ref bit _out0)/*try_mer..ateful.sk:79*/
{
  if(opcode == 0)/*try_mer..ateful.sk:80*/
  {
    _out0 = 0;
    return;
  }
  if(opcode == 1)/*try_mer..ateful.sk:83*/
  {
    _out0 = !(o1 | o2);
    return;
  }
  if(opcode == 2)/*try_mer..ateful.sk:86*/
  {
    _out0 = (!(o1)) & o2;
    return;
  }
  if(opcode == 3)/*try_mer..ateful.sk:89*/
  {
    _out0 = !(o1);
    return;
  }
  if(opcode == 4)/*try_mer..ateful.sk:92*/
  {
    _out0 = o1 & (!(o2));
    return;
  }
  if(opcode == 5)/*try_mer..ateful.sk:95*/
  {
    _out0 = !(o2);
    return;
  }
  if(opcode == 6)/*try_mer..ateful.sk:98*/
  {
    _out0 = o1 & o2;
    return;
  }
  if(opcode == 7)/*try_mer..ateful.sk:102*/
  {
    _out0 = !(o1 & o2);
    return;
  }
  if(opcode == 8)/*try_mer..ateful.sk:105*/
  {
    _out0 = o1 & o2;
    return;
  }
  if(opcode == 9)/*try_mer..ateful.sk:108*/
  {
    _out0 = !(o1 & o2);
    return;
  }
  if(opcode == 10)/*try_mer..ateful.sk:112*/
  {
    _out0 = o2;
    return;
  }
  if(opcode == 11)/*try_mer..ateful.sk:115*/
  {
    _out0 = (!(o1)) | o2;
    return;
  }
  if(opcode == 12)/*try_mer..ateful.sk:118*/
  {
    _out0 = o1;
    return;
  }
  if(opcode == 13)/*try_mer..ateful.sk:121*/
  {
    _out0 = o1 | (!(o2));
    return;
  }
  if(opcode == 14)/*try_mer..ateful.sk:124*/
  {
    _out0 = o1 | o2;
    return;
  }
  else
  {
    _out0 = 1;
    return;
  }
}
/*try_mer..ateful.sk:134*/

void compute_alu (int op, int o1, int o2, ref int _out0)/*try_mer..ateful.sk:134*/
{
  if(op == 0)/*try_mer..ateful.sk:135*/
  {
    _out0 = o1 + o2;
    return;
  }
  if(op == 1)/*try_mer..ateful.sk:138*/
  {
    _out0 = o1 - o2;
    return;
  }
  if(op == 2)/*try_mer..ateful.sk:141*/
  {
    _out0 = o2 - o1;
    return;
  }
  if(op == 3)/*try_mer..ateful.sk:144*/
  {
    _out0 = o2;
    return;
  }
  if(op == 4)/*try_mer..ateful.sk:147*/
  {
    _out0 = o1;
    return;
  }
  if(op == 5)/*try_mer..ateful.sk:150*/
  {
    _out0 = 0;
    return;
  }
  else
  {
    _out0 = 1;
    return;
  }
}
/*try_mer..ateful.sk:232*/

void query_1 (int state_0_0, int p_pkt_0, ref int[3] _out0)/*try_mer..ateful.sk:232*/
{
  _out0 = ((int[3])0);
  bit p__br_tmp00 = !(!(!(state_0_0 == 29)));
  bit p__br_tmp10 = !(state_0_0 == 29);
  int p_state_001 = (p__br_tmp00 && p__br_tmp10 ? state_0_0 + 1 : state_0_0);
  int p_state_002 = (((!(p__br_tmp00)) && (!(!(p_state_001 == 29)))) && (p_state_001 == 29) ? 0 : p_state_001);
  int p_pkt_00 = (p__br_tmp00 && p__br_tmp10 ? 0 : p_pkt_0);
  _out0[0] = p_state_002;
  _out0[1] = 0;
  _out0[2] = p_pkt_00;
  return;
}
/*try_mer..ateful.sk:158*/

void salu (int metadata_lo, int metadata_hi, int register_lo_0, int register_hi_1, ref int[3] _out0)/*try_mer..ateful.sk:158*/
{
  _out0 = ((int[3])0);
  int register_hi = register_hi_1;
  int register_lo = register_lo_0;
  int update_hi_1_value_s13 = 0;
  compute_alu(1, metadata_lo, 0, update_hi_1_value_s13)//{};
  int update_hi_2_value_s23 = 0;
  compute_alu(6, 28, register_hi_1, update_hi_2_value_s23)//{};
  int update_lo_1_value_s33 = 0;
  compute_alu(5, metadata_lo, 2, update_lo_1_value_s33)//{};
  int update_lo_2_value_s43 = 0;
  compute_alu(0, 1, register_lo_0, update_lo_2_value_s43)//{};
  bit condition_hi_s55 = ((metadata_hi - register_lo_0) + 29) != 0;
  bit condition_lo_s67 = ((metadata_lo - 0) + 31) > 0;
  bit update_hi_1_predicate_s69 = 0;
  bool_op(9, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);
  bit update_hi_2_predicate_s71 = 0;
  bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);
  bit update_lo_1_predicate_s73 = 0;
  bool_op(7, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);
  bit update_lo_2_predicate_s75 = 0;
  bool_op(12, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);
  assert (!(update_hi_1_predicate_s69 && update_hi_2_predicate_s71)); //ASSERTION CAN NOT BE SATISFIED: try_mer..ateful.sk:194 Assert at try_mer..ateful.sk:194 (1)
  if(update_hi_1_predicate_s69 && (!(update_hi_2_predicate_s71)))/*try_mer..ateful.sk:195*/
  {
    register_hi = update_hi_1_value_s13;
  }
  else
  {
    if((!(update_hi_1_predicate_s69)) && update_hi_2_predicate_s71)/*try_mer..ateful.sk:197*/
    {
      register_hi = update_hi_2_value_s23;
    }
    else
    {
      register_hi = register_hi_1;
    }
  }
  assert (!(update_lo_1_predicate_s73 && update_lo_2_predicate_s75)); //ASSERTION CAN NOT BE SATISFIED: try_mer..ateful.sk:205 Assert at try_mer..ateful.sk:205 (1)
  if(update_lo_1_predicate_s73 && (!(update_lo_2_predicate_s75)))/*try_mer..ateful.sk:206*/
  {
    register_lo = update_lo_1_value_s33;
  }
  else
  {
    if((!(update_lo_1_predicate_s73)) && update_lo_2_predicate_s75)/*try_mer..ateful.sk:208*/
    {
      register_lo = update_lo_2_value_s43;
    }
    else
    {
      register_lo = register_lo_0;
    }
  }
  _out0[0] = register_lo;
  _out0[1] = 0;
  _out0[2] = register_hi;
  return;
}
/*try_mer..ateful.sk:257*/

void sketch (int state_0, int p_pkt_0)/*try_mer..ateful.sk:257*/
{
  int[3] impl_s1 = {0,0,0};
  salu(p_pkt_0, 0, state_0, 0, impl_s1);
  int[3] spec_s3 = {0,0,0};
  query_1(state_0, p_pkt_0, spec_s3);
  assert ((impl_s1[0]) == (spec_s3[0])); //Assert at try_mer..ateful.sk:260 (1)
  assert ((impl_s1[1]) == (spec_s3[1])); //Assert at try_mer..ateful.sk:261 (1)
  assert ((impl_s1[2]) == (spec_s3[2])); //Assert at try_mer..ateful.sk:262 (1)
}
/*try_mer..ateful.sk:257*/

void sketch__Wrapper (int state_0, int p_pkt_0)  implements sketch__WrapperNospec/*try_mer..ateful.sk:257*/
{
  sketch(state_0, p_pkt_0);
}
/*try_mer..ateful.sk:257*/

void sketch__WrapperNospec (int state_0, int p_pkt_0)/*try_mer..ateful.sk:257*/
{ }
/* END PACKAGE ANONYMOUS*/
[SKETCH] DONE
Total time = 617
